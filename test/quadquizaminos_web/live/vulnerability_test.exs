defmodule QuadquizaminosWeb.VulnerabilityTest do
  use QuadquizaminosWeb.ConnCase

  import Phoenix.LiveViewTest
  alias Quadquizaminos.Accounts.User

  @bottom_vulnerability_value Application.get_env(:quadquizaminos, :bottom_vulnerability_value)
  setup %{conn: conn} do
    user = %User{name: "Quiz Block ", user_id: 40_000_000}
    conn = assign(conn, :current_user, user.user_id)
    [user: user, conn: conn]
  end

  describe "Bottom Vulnerability:" do
    setup do
      bottom = %{
        {1, 20} => {1, 20, :blue},
        {1, 19} => {1, 19, :blue},
        {1, 18} => {1, 18, :blue},
        {1, 17} => {1, 17, :blue}
      }

      assigns = %{
        bottom: bottom,
        brick: Quadquizaminos.Brick.new_random(),
        current_user: 40_000_000,
        gametime_counter: @bottom_vulnerability_value,
        score: 0,
        speed: 2,
        state: :playing,
        tick_count: 1,
        row_count: 0,
        brick_count: 1
      }

      [assigns: assigns]
    end

    test "gametime_counter increases on clock tick", %{assigns: assigns} do
      socket = clock_tick_handler(assigns)

      assert socket.assigns.gametime_counter == @bottom_vulnerability_value + 1
    end

    test "random bottom block is marked with vulnerability when gametime_counter crosses interval set",
         %{assigns: assigns} do
      socket = clock_tick_handler(assigns)

      assert socket.assigns.gametime_counter > @bottom_vulnerability_value

      assert Enum.any?(socket.assigns.bottom, fn {_point, {_x, _y, color}} ->
               color == :vuln_grey_yellow
             end)
    end

    test "gametime_counter only increase if state is :playing", %{assigns: assigns} do
      # state :playing
      socket = clock_tick_handler(assigns)

      assert socket.assigns.gametime_counter == @bottom_vulnerability_value + 1

      # state :paused
      assigns = %{assigns | state: :paused}

      socket = clock_tick_handler(assigns)

      assert socket.assigns.gametime_counter == @bottom_vulnerability_value
    end

    test "gametime_counter is 0 if game state is :game_over or :starting", %{assigns: assigns} do
      # state :game_over
      assigns = %{assigns | state: :game_over}

      socket = clock_tick_handler(assigns)

      assert socket.assigns.gametime_counter == 0

      # state :starting
      assigns = %{assigns | state: :starting}

      socket = clock_tick_handler(assigns)
      assert socket.assigns.gametime_counter == 0
    end
  end

  describe "Incoming Block Vulnerability:" do
    test "incoming block is marked with vulnerability when brick count is evenly divided by threshold",
         %{conn: conn} do
      {:ok, view, _html} = live(conn, "/tetris")

      html = render_click(view, "start")
      # brick count is 1
      # vulnerability_new_brick_threshold: 7
      refute html =~ "vuln_grey_yellow"
    end
  end

  defp clock_tick_handler(assigns) do
    socket = %Phoenix.LiveView.Socket{assigns: assigns}

    {:noreply, socket} = QuadquizaminosWeb.TetrisLive.handle_info(:tick, socket)
    socket
  end
end
